unit MethNum;

interface

uses
  Math, readf0nd;

const
  {Скорость вращения Земли (рад/с)}
  EARTH_ROT_SPEED = 2*PI/86400;

  {Радиус земли в км}
  EARTH_RAD = 6371;

  {Стандартная эпоха (юлианские дни)}
  STANDRD_ERA = 2451545.0;

  {Маленькое число, для точности численных методов}
  EPS = 10E-12;

  {Кол-во километров в 1 а.е.}
  AU_KM = 1.49597870691E+8;

  {Константа для перевода градусов в радианы и обратно}
  RAD = PI/180.0;

  {Наклон эклиптики к экватору (радианы)}
  ECL_EQ = 84381.412/3600*rad;


  MU = 2.9591220828559110225E-4;

type
  {Элементы орбиты метеороида: a,e,i,Om,w,v}
  ElementsOfOrbit = record
    a,e,i,Om,w,v: extended;
  end;

  {Декартовы координаты и скорости метеороида: X,Y,Z,Vx,Vy,Vz}
  DacartCoords = record
    X,Y,Z,Vx,Vy,Vz: extended;
  end;


  {Комбинированный тип данных для даты и времени}
  DateTime = record
    day,month,year,hour,minute: integer;
    second: extended;
  end;

  {Экваториальные координаты (прямое восхождение, склонение)}
  EquatorCoords = record
    alpha,delta: extended;
  end;

  {Горизонтальные координаты (азимут, высота над горизонтом)}
  HorizontalCoords = record
    Az,h: extended;
  end;

  {Эклиптические координаты (долгота и широта)}
  EclipticCoords = record
    lamda,betta: extended;
  end;

  {Географические координаты (долгота и широта)}
  GeogrCoords = record
    long,lat: extended;
  end;


{========================================================
Блок процедур и функций для инициализации и ввода.

Для автоматизации этой процедуры было придумано специальные
расширения .emeth и .cmeth, файлы которого являются специфицированным
текстом, то есть, данные идущие в определенном порядке для
облегчения процедуры ввода.

.emeth хранит в себе элементы орбиты метеора в первой строке
в следующем порядке: a,e,i,Om,w,v.
.cmeth хранит в себе координаты и скорости в первой строке в
следующем порядке: X,Y,Z,Vx,Vy,Vz.
Во второй строке обоих файлов хранится дата наблюдения в
формате dd mm yy hh mm ss.
В третей строке обоих файлов хранятся экваториальные координаты
наблюдаемого метеора в следующем порядке: alpha delta.
В зависимости от того, какой информацией о метеоре обладает
пользователь, будет выбираться функция для ввода.

Обе функции (для вариантов с координатами или элементами орбиты)
перегружены трижды. Соответственно, из файла может быть считана
лишь первая строка, первые две или все три.
=========================================================}

{+Ввод декартовых координат метеора, времени наблюдения и экваториальных координат}
procedure inputCMeth(filename: String; var meth: DecartCoords; time: DateTime;
          eqCords: EquatorCoords); overload;

{+Ввод декартовых координат метеора и времени наблюдения}
procedure inputCMeth(filename: String; var meth: DecartCoords; time: DateTime); overload;

{+Ввод декартовых координат метеора}
procedure inputCMeth(filename: String; var meth: DecartCoords); overload;

{+Ввод элементов орбиты метеора, времени наблюдения и экваториальных координат}
procedure inputEMeth(filename: String; var meth: ElementsOfOrbit; time: DateTime;
          eqCords: EquatorCoords); overload;

{+Ввод элементов орбиты метеора и времени его наблюдения}
procedure inputEMeth(filename: String; var meth: ElementsOfOrbit; time: DateTime); overload;

{+Ввод только элементов орбиты  метеора}
procedure inputEMeth(filename: String; var meth: ElementsOfOrbit); overload;

{+Инициализация даты и времени для дальнейшего использования в
программе}
function initDateTime(day,month,year,hour,minute,second): DateTime;

{+Инициализация элементов орбиты метеора}
function initElems(a,e,i,Om,w,v: extended): ElementsOfOrbit;

{+Инициализация декартовых координат метеора}
function initDecartCoords(X,Y,Z,Vx,Vy,Vz: extended): DecartCoords;

{+Инициализация экваториальных координат}
function initEquatorCoords(alpha,delta: extended): EquatorCoords;

{+Инициализация эклиптических координат}
function initEclipticCoords(lamda,betta: extended): EclipticCoords;

{+Инициализация горизонтальных координат}
function initHorizontalCoords(Az,h: extended): HorizontalCoords;

{+Инициализация георграфических координат}
function initGeogrCoords(long,lat: extended): GeogrCoords;

{+Вывод коордианат в файл}
procedure printCoords(coords: DecartCoords; var fileName: text); overload;

{+Вывод координат на экран}
procedure printCoords(coords: DecartCoords); overload;

{+Вывод скоростей в файл}
procedure printVel(coords: DecartCoords; var fileName: text); overload;

{+Вывод скоростей на экран}
procedure printVel(coords: DecartCoords); overload;

{+Вывод коордианат и скоростей в файл}
procedure printCoordsVel(coords: DecartCoords; var fileName: text); overload;

{+Вывод координат и скоростей на экран}
procedure printCoordsVel(coords: DecartCoords); overload;

{Выводит в файл элементы орбиты}
procedure printElements(elem: ElementsOfOrbit; var fileName: text); overload;

{Выводит на экран элементы орбиты}
procedure printElements(elem: ElementsOfOrbit); overload;

{Вывод в файл небесных координат (конкретно, экваториальных)}
procedure printCelCoords(coords: EquatorCoords; var fileName: text); overload;

{Вывод в файл небесных координат (конкретно, горизонтальных)}
procedure printCelCoords(coords: HorizontalCoords; var fileName: text); overload;

{Вывод в файл небесных координат (конкретно, эклиптических)}
procedure printCelCoords(coords: EclipticCoords; var fileName: text); overload;

{Вывод на экран небесных координат (конкретно, экваториальных)}
procedure printCelCoords(coords: EquatorCoords); overload;

{Вывод на экран небесных координат (конкретно, горизонтальных)}
procedure printCelCoords(coords: HorizontalCoords); overload;

{Вывод на экран небесных координат (конкретно, эклиптических)}
procedure printCelCoords(coords: EclipticCoords); overload;


{================================================================
           Конец блока процедур инициализацции и ввода
=================================================================}


{=================================================================
Блок астрономических процедур и функций, связанных с переходами от одной СК
к другой, переходами от элементов орбиты к декартовым координатам и обратно,
процедурами, связанными с временем.
==================================================================}

{Функция перехода от элементов орбиты к декартовым координатам}
function fromOrbitToDecart(elems: ElementsOfOrbit): DecartCoords;

{Функция перехода от декартовых координат к элементам орбиты}
function fromDecartToOrbit(coord: DecartCoords): ElementsOfOrbit;

{Перевод григорианской даты к юлианской}
function JDate(dt: DateTime): extended;

{Звездное время на полночь введенной даты}
function siderealTime(year,month,day: integer): extended;

{Решает уравнение Кеплера методом Ньютона}
function keplerSolution(e,M: extended): extended;

{Перевод юлианской даты к григорианской}
function grDate(JD: extended): DateTime;

{Звездное время на даную дату на данной долготе}
function sidTimeOnLong(date: DateTime; long: extended): extended;

{Переход от экваториальных координат к эклиптическим (случай сферы)}
function fromEqToEcl(eq: EquatorCoords): EclipticCoords;

{Переход от эклиптических координат к экваториальным (случай сферы)}
function fromEclToEq(ecl: EclipticCoords): EquatorCoords;

{Переход от горизонтальных координат к экваториальным (случай сферы)}
function fromHorToEq(hor: HorizontalCoords): EquatorCoords;

{Переход от экваториальных координат к горизонтальным (случай сферы)}
function fromEqToHor(eq: EquatorCoords): HorizontalCoords;

{Переход от экваториальных координат к эклиптичекским (декартов случай)}
function fromEqToEclDecart(eq: DecatrCoords): DecartCoords;

{Переход от эклиптических координат к экваториальным (декартов случай)}
function fromEclToEqDecart(ecl: DecartCoords): DecartCoords;

{Возвращает радиант метеора}
function getRadiant(meth: DecartCoords): extended;


{=====================================================================
            Конец блока астрономических процедур и функций
======================================================================}


{=====================================================================
Блок математических процедур и функций. Вращение систем координат,
модули векторов, перевод одних единиц в другие.
======================================================================}

{Поворот системы координат вокруг оси Х на угол angle (в радианах)}
function rotateSCX(angle: extended; dc: DecartCoords): DecartCoords;

{Поворот системы координат вокруг оси Y на угол angle (в радианах)}
function rotateSCY(angle: extended; dc: DecartCoords): DecartCoords;

{Поворот системы координат вокруг оси Z на угол angle (в радианах)}
function rotateSCZ(angle: extended; dc: DecartCoords): DecartCoords;

{переход от декартовых координат к сферическим}
procedure fromDecartToSphere(A: DecartCoords; var fi,lam: extended);

function fromSphereToDecart(fi,lam,r: extended): DecartCoords;

{Сумма двух векторов (и координат, и скоростей)}
function sumOfVectors(A,B: DecartCoords): DecartCoords;

{Разность двух векторов (и координат, и скоростей)}
function differenceOfVectors(A,B: DecartCoords): DecartCoords;

{Модуль вектора положения (части, отвечающей за координаты)}
function moduleOfCoords(A: DecartCoords): extended;

{Модуль вектора скорости (части, отвечающей за скорость)}
function moduleOfVelocity(A: DecartCoords): extended;

{Переход к представлению времени в виде десятичной дроби}
function timeToDotTime(t: DateTime): extended;

{Переход к дискретному представлению времени (часы, минуты, секунды) от
вида двесятичной дроби (поля отвечающие за дату равны НУЛЮ)}
function dotTimeToTime(t: extended): DateTime;

{Перевод градусов в радианы}
function toRadians(x: extended): extended;

{Перевод радиан в градусы}
function toDegree(x: extended): extended;

{Перевод километров в астрономические единицы}
function toAu(x: extended): extended;

{Перевод астрономических единиц в километры}
function toKm(x: extended): extended;

{Перевод градусов в часы}
function toHour(x: extended): extended;

{Перевод часов в градусы}
function toDegFromHour(x: extended): extended;

{=====================================================================
            Конец блока математических процедур и функций
======================================================================}


{=====================================================================
   Блок процедур и функций, работающих со внешними данными.
   Здесь работа с фондами больших планет. По надобности и использованию
   сторонних библиотек будет дополняться.
======================================================================}

{Получаем координаты Земли из 430 фонда больших планет}
function getEarthCoords(): DecartCoords;

{=====================================================================
    Конец блока процедур и функций, работающих со внешними данными
======================================================================}

implementation

{=============================================================================}

procedure inputCMeth(filename: String; var meth: DecartCoords; time: DateTime;
          eqCoords: EquatorCoords); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.X,meth.Y,meth.Z,meth.Vx,meth.Vy,meth.Vz);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,time.day,time.month,time.year,time.hour,time.minute,time.second);
  except
    Writeln('Невозможно считать дату. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,eqCoords.alpha,eqCoords.delta);
  except
    Writeln('Невозможно считать экваториальные координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;

procedure inputCMeth(filename: String; var meth: DecartCoords; time: DateTime); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.X,meth.Y,meth.Z,meth.Vx,meth.Vy,meth.Vz);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,time.day,time.month,time.year,time.hour,time.minute,time.second);
  except
    Writeln('Невозможно считать дату. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;

procedure inputCMeth(filename: String; var meth: DecartCoords); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.X,meth.Y,meth.Z,meth.Vx,meth.Vy,meth.Vz);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;


procedure inputEMeth(filename: String; var meth: ElementsOfOrbit; time: DateTime;
          eqCords: EquatorCoords); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.a,meth.e,meth.i,meth.Om,meth.w,meth.v);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,time.day,time.month,time.year,time.hour,time.minute,time.second);
  except
    Writeln('Невозможно считать дату. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,eqCoords.alpha,eqCoords.delta);
  except
    Writeln('Невозможно считать экваториальные координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;


procedure inputEMeth(filename: String; var meth: ElementsOfOrbit; time: DateTime); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.a,meth.e,meth.i,meth.Om,meth.w,meth.v);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,time.day,time.month,time.year,time.hour,time.minute,time.second);
  except
    Writeln('Невозможно считать дату. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;


procedure inputEMeth(filename: String; var meth: ElementsOfOrbit); overload;
var infile: text;
begin
  try
    Assign(infile,filename);
    Reset(infile);
  except
    Writeln('Файл не найден. Проверьте правильность пути.');
    Readln;
    Halt;
  end;

  try
    Readln(infile,meth.a,meth.e,meth.i,meth.Om,meth.w,meth.v);
  except
    Writeln('Невозможно считать координаты. Проверьте конфигурацию файла.');
    Readln;
    Halt;
  end;

  Close(infile);
end;


function initDateTime(day,month,year,hour,minute,second): DateTime;
var t: DateTime;
begin
  t.day := day;
  t.month := month;
  t.year := year;
  t.hour := hour;
  t.minute := minute;
  t.second := second;

  result := t;
end;


function initElems(a,e,i,Om,w,v: extended): ElementsOfOrbit;
var el: ElementsOfOrbit;
begin
  el.a := a;
  el.e := e;
  el.i := i;
  el.Om := Om;
  el.a := w;
  el.a := v;

  result := el;
end;


function initDecartCoords(X,Y,Z,Vx,Vy,Vz: extended): DecartCoords;
var coord: DecartCoords;
begin
  coord.X := X;
  coord.Y := Y;
  coord.Z := Z;
  coord.Vx := Vx;
  coord.Vy := Vy;
  coord.Vz := Vz;

  result := coord;
end;


function initEquatorCoords(alpha,delta: extended): EquatorCoords;
var coor: EquatorCoords;
begin
  coor.alpha := alpha;
  coor.delta := delta;

  result := coor;
end;


function initEclipticCoords(lamda,betta: extended): EclipticCoords;
var coor: EclipticCoords;
begin
  coor.lamda := lamda;
  coor.betta := betta;

  result := coor;
end;


function initHorizontalCoords(Az,h: extended): HorizontalCoords;
var coor: HorizontalCoords;
begin
  coor.alpha := Az;
  coor.delta := h;

  result := coor;
end;


function initGeogrCoords(long,lat: extended): GeogrCoords;
var coor: GeogrCoords;
begin
  coor.long := long;
  coor.lat := lat;

  result := coor;
end;


procedure printCoords(coords: DecartCoords; var fileName: text); overload;
begin
  Writeln(fileName,coords.X,' ',coords.Y,' ',cords.Z);
end;


procedure printCoords(coords: DecartCoords); overload;
begin
  Writeln(coords.X,' ',coords.Y,' ',cords.Z);
end;


procedure printVel(coords: DecartCoords; var fileName: text); overload;
begin
  Writeln(fileName,coords.Vx,' ',coords.Vy,' ',cords.Vz);
end;


procedure printVel(coords: DecartCoords); overload;
begin
  Writeln(coords.Vx,' ',coords.Vy,' ',cords.Vz);
end;


procedure printCoordsVel(coords: DecartCoords; var fileName: text); overload;
begin
  Writeln(fileName, coords.X,' ',coords.Y,' ',cords.Z,' ',coords.Vx,' ',
          coords.Vy,' ',coords.Vz);
end;


procedure printCoordsVel(coords: DecartCoords); overload;
begin
  Writeln(coords.X,' ',coords.Y,' ',cords.Z,' ',coords.Vx,' ',coords.Vy,
          ' ',coords.Vz);
end;


procedure printElements(elem: ElementsOfOrbit; var fileName: text); overload;
begin
  with elem do begin
    Writeln(fileName,a,' ',e,' ',i,' ',Om,' ',w,' ',v);
  end;
end;
{=============================================================================}
end.
